{"ast":null,"code":"'use strict'; // TODO: Use the `URL` global when targeting Node.js 10\n\nvar _toConsumableArray = require(\"/Users/tingyuan.lu/chatkit/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar URLParser = typeof URL === 'undefined' ? require('url').URL : URL;\n\nvar testParameter = function testParameter(name, filters) {\n  return filters.some(function (filter) {\n    return filter instanceof RegExp ? filter.test(name) : filter === name;\n  });\n};\n\nmodule.exports = function (urlString, opts) {\n  opts = Object.assign({\n    defaultProtocol: 'http:',\n    normalizeProtocol: true,\n    forceHttp: false,\n    forceHttps: false,\n    stripHash: true,\n    stripWWW: true,\n    removeQueryParameters: [/^utm_\\w+/i],\n    removeTrailingSlash: true,\n    removeDirectoryIndex: false,\n    sortQueryParameters: true\n  }, opts); // Backwards compatibility\n\n  if (Reflect.has(opts, 'normalizeHttps')) {\n    opts.forceHttp = opts.normalizeHttps;\n  }\n\n  if (Reflect.has(opts, 'normalizeHttp')) {\n    opts.forceHttps = opts.normalizeHttp;\n  }\n\n  if (Reflect.has(opts, 'stripFragment')) {\n    opts.stripHash = opts.stripFragment;\n  }\n\n  urlString = urlString.trim();\n  var hasRelativeProtocol = urlString.startsWith('//');\n  var isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString); // Prepend protocol\n\n  if (!isRelativeUrl) {\n    urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, opts.defaultProtocol);\n  }\n\n  var urlObj = new URLParser(urlString);\n\n  if (opts.forceHttp && opts.forceHttps) {\n    throw new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n  }\n\n  if (opts.forceHttp && urlObj.protocol === 'https:') {\n    urlObj.protocol = 'http:';\n  }\n\n  if (opts.forceHttps && urlObj.protocol === 'http:') {\n    urlObj.protocol = 'https:';\n  } // Remove hash\n\n\n  if (opts.stripHash) {\n    urlObj.hash = '';\n  } // Remove duplicate slashes if not preceded by a protocol\n\n\n  if (urlObj.pathname) {\n    // TODO: Use the following instead when targeting Node.js 10\n    // `urlObj.pathname = urlObj.pathname.replace(/(?<!https?:)\\/{2,}/g, '/');`\n    urlObj.pathname = urlObj.pathname.replace(/((?![https?:]).)\\/{2,}/g, function (_, p1) {\n      if (/^(?!\\/)/g.test(p1)) {\n        return \"\".concat(p1, \"/\");\n      }\n\n      return '/';\n    });\n  } // Decode URI octets\n\n\n  if (urlObj.pathname) {\n    urlObj.pathname = decodeURI(urlObj.pathname);\n  } // Remove directory index\n\n\n  if (opts.removeDirectoryIndex === true) {\n    opts.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n  }\n\n  if (Array.isArray(opts.removeDirectoryIndex) && opts.removeDirectoryIndex.length > 0) {\n    var pathComponents = urlObj.pathname.split('/');\n    var lastComponent = pathComponents[pathComponents.length - 1];\n\n    if (testParameter(lastComponent, opts.removeDirectoryIndex)) {\n      pathComponents = pathComponents.slice(0, pathComponents.length - 1);\n      urlObj.pathname = pathComponents.slice(1).join('/') + '/';\n    }\n  }\n\n  if (urlObj.hostname) {\n    // Remove trailing dot\n    urlObj.hostname = urlObj.hostname.replace(/\\.$/, ''); // Remove `www.`\n    // eslint-disable-next-line no-useless-escape\n\n    if (opts.stripWWW && /^www\\.([a-z\\-\\d]{2,63})\\.([a-z\\.]{2,5})$/.test(urlObj.hostname)) {\n      // Each label should be max 63 at length (min: 2).\n      // The extension should be max 5 at length (min: 2).\n      // Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n      urlObj.hostname = urlObj.hostname.replace(/^www\\./, '');\n    }\n  } // Remove query unwanted parameters\n\n\n  if (Array.isArray(opts.removeQueryParameters)) {\n    for (var _i = 0, _arr = _toConsumableArray(urlObj.searchParams.keys()); _i < _arr.length; _i++) {\n      var key = _arr[_i];\n\n      if (testParameter(key, opts.removeQueryParameters)) {\n        urlObj.searchParams.delete(key);\n      }\n    }\n  } // Sort query parameters\n\n\n  if (opts.sortQueryParameters) {\n    urlObj.searchParams.sort();\n  } // Take advantage of many of the Node `url` normalizations\n\n\n  urlString = urlObj.toString(); // Remove ending `/`\n\n  if (opts.removeTrailingSlash || urlObj.pathname === '/') {\n    urlString = urlString.replace(/\\/$/, '');\n  } // Restore relative protocol, if applicable\n\n\n  if (hasRelativeProtocol && !opts.normalizeProtocol) {\n    urlString = urlString.replace(/^http:\\/\\//, '//');\n  }\n\n  return urlString;\n};","map":null,"metadata":{},"sourceType":"script"}