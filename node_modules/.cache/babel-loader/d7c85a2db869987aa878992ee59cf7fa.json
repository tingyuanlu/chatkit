{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/tingyuan.lu/chatkit/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/tingyuan.lu/chatkit/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/tingyuan.lu/chatkit/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/tingyuan.lu/chatkit/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/tingyuan.lu/chatkit/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"/Users/tingyuan.lu/chatkit/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar CancelError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(CancelError, _Error);\n\n  function CancelError(reason) {\n    var _this;\n\n    _classCallCheck(this, CancelError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CancelError).call(this, reason || 'Promise was canceled'));\n    _this.name = 'CancelError';\n    return _this;\n  }\n\n  _createClass(CancelError, [{\n    key: \"isCanceled\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return CancelError;\n}(_wrapNativeSuper(Error));\n\nvar PCancelable =\n/*#__PURE__*/\nfunction () {\n  _createClass(PCancelable, null, [{\n    key: \"fn\",\n    value: function fn(userFn) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return new PCancelable(function (resolve, reject, onCancel) {\n          args.push(onCancel);\n          userFn.apply(void 0, args).then(resolve, reject);\n        });\n      };\n    }\n  }]);\n\n  function PCancelable(executor) {\n    var _this2 = this;\n\n    _classCallCheck(this, PCancelable);\n\n    this._cancelHandlers = [];\n    this._isPending = true;\n    this._isCanceled = false;\n    this._rejectOnCancel = true;\n    this._promise = new Promise(function (resolve, reject) {\n      _this2._reject = reject;\n\n      var onResolve = function onResolve(value) {\n        _this2._isPending = false;\n        resolve(value);\n      };\n\n      var onReject = function onReject(error) {\n        _this2._isPending = false;\n        reject(error);\n      };\n\n      var onCancel = function onCancel(handler) {\n        _this2._cancelHandlers.push(handler);\n      };\n\n      Object.defineProperties(onCancel, {\n        shouldReject: {\n          get: function get() {\n            return _this2._rejectOnCancel;\n          },\n          set: function set(bool) {\n            _this2._rejectOnCancel = bool;\n          }\n        }\n      });\n      return executor(onResolve, onReject, onCancel);\n    });\n  }\n\n  _createClass(PCancelable, [{\n    key: \"then\",\n    value: function then(onFulfilled, onRejected) {\n      return this._promise.then(onFulfilled, onRejected);\n    }\n  }, {\n    key: \"catch\",\n    value: function _catch(onRejected) {\n      return this._promise.catch(onRejected);\n    }\n  }, {\n    key: \"finally\",\n    value: function _finally(onFinally) {\n      return this._promise.finally(onFinally);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      if (!this._isPending || this._isCanceled) {\n        return;\n      }\n\n      if (this._cancelHandlers.length > 0) {\n        try {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = this._cancelHandlers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var handler = _step.value;\n              handler();\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        } catch (error) {\n          this._reject(error);\n        }\n      }\n\n      this._isCanceled = true;\n\n      if (this._rejectOnCancel) {\n        this._reject(new CancelError(reason));\n      }\n    }\n  }, {\n    key: \"isCanceled\",\n    get: function get() {\n      return this._isCanceled;\n    }\n  }]);\n\n  return PCancelable;\n}();\n\nObject.setPrototypeOf(PCancelable.prototype, Promise.prototype);\nmodule.exports = PCancelable;\nmodule.exports.default = PCancelable;\nmodule.exports.CancelError = CancelError;","map":null,"metadata":{},"sourceType":"script"}