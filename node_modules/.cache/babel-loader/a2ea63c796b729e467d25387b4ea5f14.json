{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar authenticator_1 = require(\"./authenticator\");\n\nvar base_client_1 = require(\"./base_client\");\n\nvar HOST_BASE = 'pusherplatform.io';\nvar HTTPS_PORT = 443;\n\nvar Instance =\n/** @class */\nfunction () {\n  function Instance(options) {\n    if (!options.locator) {\n      throw new Error('Expected `instanceLocator` property in Instance options');\n    }\n\n    if (options.locator.split(\":\").length !== 3) {\n      throw new Error('The `locator` property is in the wrong format');\n    }\n\n    if (!options.serviceName) {\n      throw new Error('Expected `serviceName` property in Instance options');\n    }\n\n    if (!options.serviceVersion) {\n      throw new Error('Expected `serviceVersion` property in Instance otpions');\n    }\n\n    if (!options.client && !options.sdkInfo) {\n      throw new Error('Expected one of `client` or `sdkInfo` to be provided');\n    }\n\n    var splitInstance = options.locator.split(\":\");\n    this.platformVersion = splitInstance[0];\n    this.cluster = splitInstance[1];\n    this.id = splitInstance[2];\n    this.serviceName = options.serviceName;\n    this.serviceVersion = options.serviceVersion;\n    var keyParts = options.key.match(/^([^:]+):(.+)$/);\n\n    if (!keyParts) {\n      throw new Error('Invalid instance key');\n    }\n\n    this.keyId = keyParts[1];\n    this.keySecret = keyParts[2];\n    this.client = options.client || new base_client_1.default({\n      host: options.host || this.cluster + \".\" + HOST_BASE,\n      instanceId: this.id,\n      serviceName: this.serviceName,\n      serviceVersion: this.serviceVersion,\n      port: options.port || HTTPS_PORT,\n      sdkInfo: options.sdkInfo\n    });\n    this.authenticator = new authenticator_1.default(this.id, this.keyId, this.keySecret);\n  }\n\n  Instance.prototype.request = function (options) {\n    return this.client.request(options);\n  };\n\n  Instance.prototype.authenticate = function (authenticatePayload, options) {\n    return this.authenticator.authenticate(authenticatePayload, options);\n  };\n\n  Instance.prototype.authenticateWithRefreshToken = function (authenticatePayload, options) {\n    return this.authenticator.authenticateWithRefreshToken(authenticatePayload, options);\n  };\n\n  Instance.prototype.generateAccessToken = function (options) {\n    return this.authenticator.generateAccessToken(options);\n  };\n\n  return Instance;\n}();\n\nexports.default = Instance;","map":null,"metadata":{},"sourceType":"script"}