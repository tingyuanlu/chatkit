{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/tingyuan.lu/chatkit/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/tingyuan.lu/chatkit/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar got_1 = require(\"got\");\n\nvar platform_node_1 = require(\"@pusher/platform-node\");\n\nvar utils_1 = require(\"./utils\");\n\nvar package_json_1 = __importDefault(require(\"../package.json\"));\n\nvar TOKEN_EXPIRY_LEEWAY = 30;\n\nvar Chatkit =\n/*#__PURE__*/\nfunction () {\n  function Chatkit(options) {\n    _classCallCheck(this, Chatkit);\n\n    var instanceLocator = options.instanceLocator,\n        key = options.key,\n        port = options.port,\n        host = options.host,\n        client = options.client;\n    var sdkInfo = new platform_node_1.SDKInfo({\n      productName: \"chatkit\",\n      version: package_json_1.default.version\n    });\n    var instanceOptions = {\n      locator: instanceLocator,\n      key: key,\n      port: port,\n      host: host,\n      client: client,\n      sdkInfo: sdkInfo\n    };\n\n    var serverInstanceOptions = function serverInstanceOptions(version) {\n      return Object.assign({}, instanceOptions, {\n        serviceName: \"chatkit\",\n        serviceVersion: version\n      });\n    };\n\n    var authorizerInstanceOptions = Object.assign({}, instanceOptions, {\n      serviceName: \"chatkit_authorizer\",\n      serviceVersion: \"v2\"\n    });\n    var cursorsInstanceOptions = Object.assign({}, instanceOptions, {\n      serviceName: \"chatkit_cursors\",\n      serviceVersion: \"v2\"\n    });\n    this.instanceLocator = instanceLocator;\n    this.serverInstanceV2 = new platform_node_1.Instance(serverInstanceOptions(\"v2\"));\n    this.serverInstanceV3 = new platform_node_1.Instance(serverInstanceOptions(\"v3\"));\n    this.authorizerInstance = new platform_node_1.Instance(authorizerInstanceOptions);\n    this.cursorsInstance = new platform_node_1.Instance(cursorsInstanceOptions);\n  } // Token generation\n\n\n  _createClass(Chatkit, [{\n    key: \"authenticate\",\n    value: function authenticate(options) {\n      var userId = options.userId,\n          authPayload = options.authPayload;\n      return this.serverInstanceV3.authenticate(authPayload || {\n        grant_type: \"client_credentials\"\n      }, {\n        userId: userId\n      });\n    } // Used internally - not designed to be used externally\n\n  }, {\n    key: \"generateAccessToken\",\n    value: function generateAccessToken(options) {\n      return this.serverInstanceV3.generateAccessToken(options);\n    } // User interactions\n\n  }, {\n    key: \"createUser\",\n    value: function createUser(options) {\n      var id = options.id,\n          name = options.name;\n      return this.serverInstanceV3.request({\n        method: \"POST\",\n        path: \"/users\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: {\n          id: id,\n          name: name,\n          avatar_url: options.avatarURL,\n          custom_data: options.customData\n        },\n        jwt: this.getServerToken()\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"createUsers\",\n    value: function createUsers(options) {\n      var users = options.users.map(function (user) {\n        var id = user.id,\n            name = user.name;\n        return {\n          id: id,\n          name: name,\n          avatar_url: user.avatarURL,\n          custom_data: user.customData\n        };\n      });\n      return this.serverInstanceV3.request({\n        method: \"POST\",\n        path: \"/batch_users\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: {\n          users: users\n        },\n        jwt: this.getServerToken()\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"updateUser\",\n    value: function updateUser(options) {\n      var jwt = this.generateAccessToken({\n        su: true,\n        userId: options.id\n      });\n      var updatePayload = {};\n\n      if (options.name) {\n        updatePayload.name = options.name;\n      }\n\n      if (options.avatarURL) {\n        updatePayload.avatar_url = options.avatarURL;\n      }\n\n      if (options.customData) {\n        updatePayload.custom_data = options.customData;\n      }\n\n      return this.serverInstanceV3.request({\n        method: \"PUT\",\n        path: \"/users/\".concat(options.id),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: updatePayload,\n        jwt: jwt.token\n      }).then(function () {});\n    }\n  }, {\n    key: \"deleteUser\",\n    value: function deleteUser(options) {\n      return this.serverInstanceV3.request({\n        method: \"DELETE\",\n        path: \"/users/\".concat(options.userId),\n        jwt: this.getServerToken()\n      }).then(function () {});\n    }\n  }, {\n    key: \"getUser\",\n    value: function getUser(options) {\n      return this.serverInstanceV3.request({\n        method: \"GET\",\n        path: \"/users/\".concat(encodeURIComponent(options.id)),\n        jwt: this.getServerToken()\n      }).then(function (_ref) {\n        var body = _ref.body;\n        return JSON.parse(body);\n      });\n    }\n  }, {\n    key: \"getUsers\",\n    value: function getUsers() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.serverInstanceV3.request({\n        method: \"GET\",\n        path: \"/users\",\n        qs: {\n          from_ts: options.fromTimestamp,\n          limit: options.limit\n        },\n        jwt: this.getServerToken()\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"getUsersById\",\n    value: function getUsersById(options) {\n      return this.serverInstanceV3.request({\n        method: \"GET\",\n        path: \"/users_by_ids\",\n        qs: {\n          id: options.userIds\n        },\n        useQuerystring: true,\n        jwt: this.getServerToken()\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    } // Room interactions\n\n  }, {\n    key: \"getRoom\",\n    value: function getRoom(options) {\n      var jwt = this.generateAccessToken({\n        su: true\n      });\n      return this.serverInstanceV3.request({\n        method: \"GET\",\n        path: \"/rooms/\".concat(encodeURIComponent(options.roomId)),\n        jwt: jwt.token\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(options) {\n      var messagePayload = {\n        text: options.text\n      };\n\n      if (options.attachment) {\n        messagePayload.attachment = {\n          resource_link: options.attachment.resourceLink,\n          type: options.attachment.type\n        };\n      }\n\n      return this.serverInstanceV2.request({\n        method: \"POST\",\n        path: \"/rooms/\".concat(encodeURIComponent(options.roomId), \"/messages\"),\n        jwt: this.generateAccessToken({\n          su: true,\n          userId: options.userId\n        }).token,\n        body: messagePayload\n      }).then(function (_ref2) {\n        var body = _ref2.body;\n        return JSON.parse(body);\n      });\n    }\n  }, {\n    key: \"sendSimpleMessage\",\n    value: function sendSimpleMessage(options) {\n      return this.sendMultipartMessage({\n        roomId: options.roomId,\n        userId: options.userId,\n        parts: [{\n          type: \"text/plain\",\n          content: options.text\n        }]\n      });\n    }\n  }, {\n    key: \"sendMultipartMessage\",\n    value: function sendMultipartMessage(options) {\n      var _this = this;\n\n      if (options.parts.length === 0) {\n        return Promise.reject(new TypeError(\"message must contain at least one part\"));\n      }\n\n      return Promise.all(options.parts.map(function (part) {\n        return part.file ? _this.uploadAttachment({\n          userId: options.userId,\n          roomId: options.roomId,\n          part: part\n        }) : part;\n      })).then(function (parts) {\n        return _this.serverInstanceV3.request({\n          method: \"POST\",\n          path: \"/rooms/\".concat(encodeURIComponent(options.roomId), \"/messages\"),\n          jwt: _this.generateAccessToken({\n            su: true,\n            userId: options.userId\n          }).token,\n          body: {\n            parts: parts\n          }\n        });\n      }).then(function (_ref3) {\n        var body = _ref3.body;\n        return JSON.parse(body);\n      });\n    }\n  }, {\n    key: \"uploadAttachment\",\n    value: function uploadAttachment(_ref4) {\n      var userId = _ref4.userId,\n          roomId = _ref4.roomId,\n          _ref4$part = _ref4.part,\n          type = _ref4$part.type,\n          name = _ref4$part.name,\n          customData = _ref4$part.customData,\n          file = _ref4$part.file;\n      return this.serverInstanceV3.request({\n        method: \"POST\",\n        path: \"/rooms/\".concat(encodeURIComponent(roomId), \"/attachments\"),\n        jwt: this.generateAccessToken({\n          su: true,\n          userId: userId\n        }).token,\n        body: {\n          content_type: type,\n          content_length: file.length,\n          name: name,\n          custom_data: customData\n        }\n      }).then(function (_ref5) {\n        var body = _ref5.body;\n\n        var _JSON$parse = JSON.parse(body),\n            attachmentId = _JSON$parse.attachment_id,\n            uploadURL = _JSON$parse.upload_url;\n\n        return got_1.put(uploadURL, {\n          body: file,\n          headers: {\n            \"content-type\": type\n          }\n        }).then(function () {\n          return {\n            type: type,\n            attachment: {\n              id: attachmentId\n            }\n          };\n        });\n      });\n    }\n  }, {\n    key: \"deleteMessage\",\n    value: function deleteMessage(options) {\n      return this.serverInstanceV3.request({\n        method: \"DELETE\",\n        path: \"/messages/\".concat(options.id),\n        jwt: this.getServerToken()\n      }).then(function () {});\n    }\n  }, {\n    key: \"getRoomMessages\",\n    value: function getRoomMessages(options) {\n      return this.fetchMessages(Object.assign({}, options, {\n        serverInstance: this.serverInstanceV2\n      }));\n    }\n  }, {\n    key: \"fetchMultipartMessages\",\n    value: function fetchMultipartMessages(options) {\n      return this.fetchMessages(Object.assign({}, options, {\n        serverInstance: this.serverInstanceV3\n      }));\n    }\n  }, {\n    key: \"fetchMessages\",\n    value: function fetchMessages(options) {\n      var jwt = this.generateAccessToken({\n        su: true\n      });\n\n      var initialId = options.initialId,\n          optionsMinusInitialId = __rest(options, [\"initialId\"]);\n\n      var qs = optionsMinusInitialId;\n\n      if (initialId) {\n        qs[\"initial_id\"] = initialId;\n      }\n\n      return options.serverInstance.request({\n        method: \"GET\",\n        path: \"/rooms/\".concat(encodeURIComponent(options.roomId), \"/messages\"),\n        jwt: jwt.token,\n        qs: qs\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"getRooms\",\n    value: function getRooms() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.serverInstanceV3.request({\n        method: \"GET\",\n        path: \"/rooms\",\n        jwt: this.getServerToken(),\n        qs: {\n          from_id: options.fromId,\n          include_private: options.includePrivate\n        }\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"getUserRooms\",\n    value: function getUserRooms(options) {\n      var jwt = this.generateAccessToken({\n        su: true,\n        userId: options.userId\n      });\n      return this.serverInstanceV3.request({\n        method: \"GET\",\n        path: \"/users/\".concat(options.userId, \"/rooms\"),\n        jwt: jwt.token\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"getUserJoinableRooms\",\n    value: function getUserJoinableRooms(options) {\n      var jwt = this.generateAccessToken({\n        su: true,\n        userId: options.userId\n      });\n      return this.serverInstanceV3.request({\n        method: \"GET\",\n        path: \"/users/\".concat(options.userId, \"/rooms\"),\n        qs: {\n          joinable: true\n        },\n        jwt: jwt.token\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"createRoom\",\n    value: function createRoom(options) {\n      var jwt = this.generateAccessToken({\n        su: true,\n        userId: options.creatorId\n      });\n      var name = options.name,\n          isPrivate = options.isPrivate,\n          userIds = options.userIds,\n          customData = options.customData;\n      var roomPayload = {\n        name: name,\n        private: isPrivate || false\n      };\n\n      if (userIds && userIds.length !== 0) {\n        roomPayload[\"user_ids\"] = userIds;\n      }\n\n      if (customData) {\n        roomPayload.custom_data = customData;\n      }\n\n      return this.serverInstanceV3.request({\n        method: \"POST\",\n        path: \"/rooms\",\n        jwt: jwt.token,\n        body: roomPayload\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"updateRoom\",\n    value: function updateRoom(options) {\n      var body = {};\n\n      if (options.name) {\n        body.name = options.name;\n      }\n\n      if (options.isPrivate) {\n        body.private = options.isPrivate;\n      }\n\n      if (options.customData) {\n        body.custom_data = options.customData;\n      }\n\n      return this.serverInstanceV3.request({\n        method: \"PUT\",\n        path: \"/rooms/\".concat(options.id),\n        jwt: this.getServerToken(),\n        body: body\n      }).then(function () {});\n    }\n  }, {\n    key: \"deleteRoom\",\n    value: function deleteRoom(options) {\n      return this.serverInstanceV3.request({\n        method: \"DELETE\",\n        path: \"/rooms/\".concat(options.id),\n        jwt: this.getServerToken()\n      }).then(function () {});\n    }\n  }, {\n    key: \"addUsersToRoom\",\n    value: function addUsersToRoom(options) {\n      return this.serverInstanceV3.request({\n        method: \"PUT\",\n        path: \"/rooms/\".concat(encodeURIComponent(options.roomId), \"/users/add\"),\n        jwt: this.getServerToken(),\n        body: {\n          user_ids: options.userIds\n        }\n      }).then(function () {});\n    }\n  }, {\n    key: \"removeUsersFromRoom\",\n    value: function removeUsersFromRoom(options) {\n      return this.serverInstanceV3.request({\n        method: \"PUT\",\n        path: \"/rooms/\".concat(encodeURIComponent(options.roomId), \"/users/remove\"),\n        jwt: this.getServerToken(),\n        body: {\n          user_ids: options.userIds\n        }\n      }).then(function () {});\n    } // Authorizer interactions\n\n  }, {\n    key: \"createRoomRole\",\n    value: function createRoomRole(options) {\n      return this.createRole(Object.assign({}, options, {\n        scope: \"room\"\n      }));\n    }\n  }, {\n    key: \"createGlobalRole\",\n    value: function createGlobalRole(options) {\n      return this.createRole(Object.assign({}, options, {\n        scope: \"global\"\n      }));\n    }\n  }, {\n    key: \"createRole\",\n    value: function createRole(options) {\n      return this.authorizerInstance.request({\n        method: \"POST\",\n        path: \"/roles\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: options,\n        jwt: this.getServerToken()\n      }).then(function () {});\n    }\n  }, {\n    key: \"deleteGlobalRole\",\n    value: function deleteGlobalRole(options) {\n      return this.authorizerInstance.request({\n        method: \"DELETE\",\n        path: \"/roles/\".concat(options.name, \"/scope/global\"),\n        jwt: this.getServerToken()\n      }).then(function () {});\n    }\n  }, {\n    key: \"deleteRoomRole\",\n    value: function deleteRoomRole(options) {\n      return this.authorizerInstance.request({\n        method: \"DELETE\",\n        path: \"/roles/\".concat(options.name, \"/scope/room\"),\n        jwt: this.getServerToken()\n      }).then(function () {});\n    }\n  }, {\n    key: \"assignGlobalRoleToUser\",\n    value: function assignGlobalRoleToUser(options) {\n      return this.assignRoleToUser(options);\n    }\n  }, {\n    key: \"assignRoomRoleToUser\",\n    value: function assignRoomRoleToUser(options) {\n      return this.assignRoleToUser(options);\n    }\n  }, {\n    key: \"assignRoleToUser\",\n    value: function assignRoleToUser(options) {\n      return this.authorizerInstance.request({\n        method: \"PUT\",\n        path: \"/users/\".concat(options.userId, \"/roles\"),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: {\n          name: options.name,\n          room_id: options.roomId\n        },\n        jwt: this.getServerToken()\n      }).then(function () {});\n    }\n  }, {\n    key: \"getUserRoles\",\n    value: function getUserRoles(options) {\n      return this.authorizerInstance.request({\n        method: \"GET\",\n        path: \"/users/\".concat(options.userId, \"/roles\"),\n        jwt: this.getServerToken()\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"removeGlobalRoleForUser\",\n    value: function removeGlobalRoleForUser(options) {\n      return this.authorizerInstance.request({\n        method: \"DELETE\",\n        path: \"/users/\".concat(options.userId, \"/roles\"),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        jwt: this.getServerToken()\n      }).then(function () {});\n    }\n  }, {\n    key: \"removeRoomRoleForUser\",\n    value: function removeRoomRoleForUser(options) {\n      return this.authorizerInstance.request({\n        method: \"DELETE\",\n        path: \"/users/\".concat(options.userId, \"/roles\"),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        qs: {\n          room_id: options.roomId\n        },\n        jwt: this.getServerToken()\n      }).then(function () {});\n    }\n  }, {\n    key: \"getPermissionsForGlobalRole\",\n    value: function getPermissionsForGlobalRole(options) {\n      return this.authorizerInstance.request({\n        method: \"GET\",\n        path: \"/roles/\".concat(options.name, \"/scope/global/permissions\"),\n        jwt: this.getServerToken()\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"getPermissionsForRoomRole\",\n    value: function getPermissionsForRoomRole(options) {\n      return this.authorizerInstance.request({\n        method: \"GET\",\n        path: \"/roles/\".concat(options.name, \"/scope/room/permissions\"),\n        jwt: this.getServerToken()\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    }\n  }, {\n    key: \"updatePermissionsForGlobalRole\",\n    value: function updatePermissionsForGlobalRole(options) {\n      return this.updatePermissionsForRole(options.name, \"global\", options.permissionsToAdd || [], options.permissionsToRemove || []);\n    }\n  }, {\n    key: \"updatePermissionsForRoomRole\",\n    value: function updatePermissionsForRoomRole(options) {\n      return this.updatePermissionsForRole(options.name, \"room\", options.permissionsToAdd || [], options.permissionsToRemove || []);\n    }\n  }, {\n    key: \"getRoles\",\n    value: function getRoles() {\n      return this.authorizerInstance.request({\n        method: \"GET\",\n        path: \"/roles\",\n        jwt: this.getServerToken()\n      }).then(function (res) {\n        return JSON.parse(res.body);\n      });\n    } // Cursors\n\n  }, {\n    key: \"setReadCursor\",\n    value: function setReadCursor(options) {\n      return this.cursorsInstance.request({\n        method: \"PUT\",\n        path: \"/cursors/0/rooms/\".concat(encodeURIComponent(options.roomId), \"/users/\").concat(encodeURIComponent(options.userId)),\n        body: {\n          position: options.position\n        },\n        jwt: this.getServerToken()\n      }).then(function () {});\n    }\n  }, {\n    key: \"getReadCursor\",\n    value: function getReadCursor(options) {\n      return this.cursorsInstance.request({\n        method: \"GET\",\n        path: \"/cursors/0/rooms/\".concat(encodeURIComponent(options.roomId), \"/users/\").concat(encodeURIComponent(options.userId)),\n        jwt: this.getServerToken()\n      }).then(function (_ref6) {\n        var body = _ref6.body;\n        return JSON.parse(body);\n      });\n    }\n  }, {\n    key: \"getReadCursorsForUser\",\n    value: function getReadCursorsForUser(options) {\n      return this.cursorsInstance.request({\n        method: \"GET\",\n        path: \"/cursors/0/users/\".concat(encodeURIComponent(options.userId)),\n        jwt: this.getServerToken()\n      }).then(function (_ref7) {\n        var body = _ref7.body;\n        return JSON.parse(body);\n      });\n    }\n  }, {\n    key: \"getReadCursorsForRoom\",\n    value: function getReadCursorsForRoom(options) {\n      return this.cursorsInstance.request({\n        method: \"GET\",\n        path: \"/cursors/0/rooms/\".concat(encodeURIComponent(options.roomId)),\n        jwt: this.getServerToken()\n      }).then(function (_ref8) {\n        var body = _ref8.body;\n        return JSON.parse(body);\n      });\n    } // General requests\n\n  }, {\n    key: \"apiRequest\",\n    value: function apiRequest(options) {\n      options.jwt = options.jwt || this.getServerToken();\n      return this.serverInstanceV3.request(options);\n    }\n  }, {\n    key: \"authorizerRequest\",\n    value: function authorizerRequest(options) {\n      options.jwt = options.jwt || this.getServerToken();\n      return this.authorizerInstance.request(options);\n    }\n  }, {\n    key: \"cursorsRequest\",\n    value: function cursorsRequest(options) {\n      options.jwt = options.jwt || this.getServerToken();\n      return this.cursorsInstance.request(options);\n    }\n  }, {\n    key: \"updatePermissionsForRole\",\n    value: function updatePermissionsForRole(name, scope) {\n      var permissionsToadd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var permissionsToRemove = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n      if (permissionsToadd.length === 0 && permissionsToRemove.length === 0) {\n        throw new Error(\"Either permissionsToAdd or permissionsToRemove is required\");\n      }\n\n      var body = {};\n\n      if (permissionsToadd.length > 0) {\n        body[\"add_permissions\"] = permissionsToadd;\n      }\n\n      if (permissionsToRemove.length > 0) {\n        body[\"remove_permissions\"] = permissionsToRemove;\n      }\n\n      return this.authorizerInstance.request({\n        method: \"PUT\",\n        path: \"/roles/\".concat(name, \"/scope/\").concat(scope, \"/permissions\"),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: body,\n        jwt: this.getServerToken()\n      }).then(function () {});\n    }\n    /**\n     * This method manages the token for http library and pusher platform\n     * communication\n     */\n\n  }, {\n    key: \"getServerToken\",\n    value: function getServerToken() {\n      if (this.tokenWithExpiry && this.tokenWithExpiry.expiresAt > utils_1.getCurrentTimeInSeconds()) {\n        return this.tokenWithExpiry.token;\n      } // Otherwise generate new token and its expiration time\n\n\n      var tokenWithExpiresIn = this.serverInstanceV3.generateAccessToken({\n        su: true\n      });\n      this.tokenWithExpiry = {\n        token: tokenWithExpiresIn.token,\n        expiresAt: utils_1.getCurrentTimeInSeconds() + tokenWithExpiresIn.expires_in - TOKEN_EXPIRY_LEEWAY\n      };\n      return this.tokenWithExpiry.token;\n    }\n  }]);\n\n  return Chatkit;\n}();\n\nexports.default = Chatkit;","map":null,"metadata":{},"sourceType":"script"}