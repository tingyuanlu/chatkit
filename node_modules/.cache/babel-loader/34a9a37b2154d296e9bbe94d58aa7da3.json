{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/tingyuan.lu/chatkit/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar errors = require('./errors');\n\nvar asStream = require('./as-stream');\n\nvar asPromise = require('./as-promise');\n\nvar normalizeArguments = require('./normalize-arguments');\n\nvar merge = require('./merge');\n\nvar deepFreeze = require('./utils/deep-freeze');\n\nvar getPromiseOrStream = function getPromiseOrStream(options) {\n  return options.stream ? asStream(options) : asPromise(options);\n};\n\nvar aliases = ['get', 'post', 'put', 'patch', 'head', 'delete'];\n\nvar create = function create(defaults) {\n  defaults = merge({}, defaults);\n  normalizeArguments.preNormalize(defaults.options);\n\n  if (!defaults.handler) {\n    // This can't be getPromiseOrStream, because when merging\n    // the chain would stop at this point and no further handlers would be called.\n    defaults.handler = function (options, next) {\n      return next(options);\n    };\n  }\n\n  function got(url, options) {\n    try {\n      return defaults.handler(normalizeArguments(url, options, defaults), getPromiseOrStream);\n    } catch (error) {\n      if (options && options.stream) {\n        throw error;\n      } else {\n        return Promise.reject(error);\n      }\n    }\n  }\n\n  got.create = create;\n\n  got.extend = function (options) {\n    var mutableDefaults;\n\n    if (options && Reflect.has(options, 'mutableDefaults')) {\n      mutableDefaults = options.mutableDefaults;\n      delete options.mutableDefaults;\n    } else {\n      mutableDefaults = defaults.mutableDefaults;\n    }\n\n    return create({\n      options: merge.options(defaults.options, options),\n      handler: defaults.handler,\n      mutableDefaults: mutableDefaults\n    });\n  };\n\n  got.mergeInstances = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return create(merge.instances(args));\n  };\n\n  got.stream = function (url, options) {\n    return got(url, _objectSpread({}, options, {\n      stream: true\n    }));\n  };\n\n  var _loop = function _loop() {\n    var method = _aliases[_i];\n\n    got[method] = function (url, options) {\n      return got(url, _objectSpread({}, options, {\n        method: method\n      }));\n    };\n\n    got.stream[method] = function (url, options) {\n      return got.stream(url, _objectSpread({}, options, {\n        method: method\n      }));\n    };\n  };\n\n  for (var _i = 0, _aliases = aliases; _i < _aliases.length; _i++) {\n    _loop();\n  }\n\n  Object.assign(got, _objectSpread({}, errors, {\n    mergeOptions: merge.options\n  }));\n  Object.defineProperty(got, 'defaults', {\n    value: defaults.mutableDefaults ? defaults : deepFreeze(defaults),\n    writable: defaults.mutableDefaults,\n    configurable: defaults.mutableDefaults,\n    enumerable: true\n  });\n  return got;\n};\n\nmodule.exports = create;","map":null,"metadata":{},"sourceType":"script"}